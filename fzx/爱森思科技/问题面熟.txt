1. 用任意一种语言实现一个函数，判断一个给定整数数组中是否存在某两个元素之和恰好等于一个给定值 k，存在则返回 true，否则返回 false。该函数的输入参数有两个，第一个参数为整数数组 nums，第二个参数为整数 k，返回值为布尔值。可以参考以下签名，写出实现。【请不要使用排序！要求时间复杂度为 O(n)，n 为数组长度】

// Java
class Main {
    public boolean checkTwoSum(int[] nums, int k) {
        // Write your code here
    }
}

// JavaScript
var checkTwoSum = function(nums, k) {
    // Write your code here
};

// Swift 
class Main {
    func checkTwoSum(_ nums: [Int], _ target: Int) -> [Int] {
        // Write your code here
    }
}

// Objective C
@interface Main: NSObject
- (NSArray *) checkTwoSum:(NSArray *)nums target:(int)target;
@end
@implementation Main
- (NSArray *) checkTwoSum:(NSArray *)nums target:(int)target {
     // Write your code here
}
@end


# Python
def check_two_sum(nums, target):
    # Write your code here


2. 手动实现一种时间复杂度为 O(n log n) 的排序算法，可用任意语言实现，也可以只写出伪代码。
